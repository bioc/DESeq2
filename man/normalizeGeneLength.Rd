% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper.R
\name{normalizeGeneLength}
\alias{normalizeGeneLength}
\title{Normalize for gene length}
\usage{
normalizeGeneLength(object, files, level = c("tx", "gene"),
  geneIdCol = "gene_id", lengthCol = "length", abundanceCol = "FPKM",
  dropGenes = FALSE, importer, ...)
}
\arguments{
\item{object}{the DESeqDataSet, before calling \code{DESeq}}

\item{files}{a character vector specifying the filenames of output files
containing either transcript abundance estimates with transcript length, 
or average transcript length information per gene.}

\item{level}{either "tx" or "gene"}

\item{geneIdCol}{the name of the column of the files specifying the gene id. This
should line up with the \code{rownames(object)}. The information in the files
will be re-ordered to line up with the rownames of the object.
See \code{dropGenes} for more details.}

\item{lengthCol}{the name of the column of files specifying the length of the
feature, either transcript for \code{level="tx"} or the gene for
\code{level="gene"}.}

\item{abundanceCol}{only needed if \code{level="tx"}, the name of the
column specifying the abundance estimate of the transcript.}

\item{dropGenes}{whether to drop genes from the object,
as labelled by \code{rownames(object)}, which are not
present in the \code{geneIdCol} of the files. Defaults to FALSE
and gives an error upon finding \code{rownames} of the object
not present in the \code{geneIdCol} of the files.
The function will reorder the matching rows of the files to match
the rownames of the object.}

\item{importer}{a function to read the \code{files}.
\code{fread} from the data.table package is quite fast,
but other options include \code{read.table}, \code{read.csv}.
One can pre-test with \code{importer(files[1])}.}

\item{...}{further arguments passed to \code{importer}}
}
\value{
a DESeqDataSet with \code{\link{normalizationFactors}}
accounting for average transcript length and library size
}
\description{
Normalize for gene length using the output of transcript abundance estimators
}
\details{
This is a prototype function for importing information about changes in
the average transcript length for each gene. The use of this function
is only for testing purposes.

The function simply imports or calculates average
transcript length for each gene and each sample from external files,
and provides this matrix to the \code{normMatrix} argument of
\code{\link{estimateSizeFactors}}. 
By average transcript length, the average refers to a weighted average with respect
to the transcript abundances. The RSEM method includes such a column in their
\code{gene.results} files, but an estimate of average transcript length can
be obtained from any software which outputs a file with a row for each
transcript, specifying: transcript length, estimate of transcript abundance,
and the gene which the transcript belongs to.

Normalization factors accounting for both average transcript length and
library size of each sample are generated and then stored within the data object.
The analysis can then continue with \code{\link{DESeq}};
the stored normalization factors will be used instead of size factors in the analysis.

For RSEM \code{genes.results} files,
specify \code{level="gene"}, \code{geneIdCol="gene_id"},
and \code{lengthCol="effective_length"}

For Cufflinks \code{isoforms.fpkm_tracking} files,
specify \code{level="tx"}, \code{geneIdCol="gene_id"},
\code{lengthCol="length"}, and \code{abundanceCol="FPKM"}.

For Sailfish output files, one can write an \code{importer}
function which attaches a column \code{gene_id} based on Transcript ID,
and then specify \code{level="tx"}, \code{geneIdCol="gene_id"},
\code{lengthCol="Length"} and \code{abundanceCol="RPKM"}.

Along with the normalization matrix which is stored in \code{normalizationFactors(object)},
the resulting gene length matrix is stored in \code{assays(dds)[["avgTxLength"]]},
and will take precedence in calls to \code{\link{fpkm}}.
}
\examples{

n <- 10
files <- c("sample1","sample2")
gene_id <- rep(paste0("gene",seq_len(n)),each=3)
set.seed(1)
sample1 <- data.frame(gene_id=gene_id,length=rpois(3*n,2000),FPKM=round(rnorm(3*n,10,1),2))
sample2 <- data.frame(gene_id=gene_id,length=rpois(3*n,2000),FPKM=round(rnorm(3*n,10,1),2))
importer <- get
dds <- makeExampleDESeqDataSet(n=n, m=2)
dds <- normalizeGeneLength(dds, files=files, level="tx",
  geneIdCol="gene_id", lengthCol="length", abundanceCol="FPKM",
  dropGenes=TRUE, importer=importer)

}

